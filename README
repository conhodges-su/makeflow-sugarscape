SUGARSCAPE + MAKEFLOW + WORKQUEUE

A project utilizing WorkQueue and Makeflow (from CCTools) to speedup execution times of a serial sugarscape implementation detailed here: https://github.com/nkremerh/sugarscape 

This implementation runs on Open Science Grid (OSG) which utlizes the HTCondor grid/batch system for it's job management system.

Requirements:
Bash
Python 3
TkInter
CCTools (Makeflow and WorkQueue)

Usage:
python3 sugarscape.py

Installation:
    Run ```git clone https://github.com/conhodges-su/makeflow-sugarscape.git``` in working directory

Makefile Options:

***can only run under makeflow-sugarscape folder**

make local 
    This command runs a local-only makeflow using the ```.conf``` files in the ```/data``` folder of the repository.Output is placed in the folder specifed by `$(OUTPUTFOLDER)`. Run folders should be renamed before running another set of jobs to collect information. 
    
    - Any time results and errors are redirected to ```output.txt``` in `$(OUTPUTFOLDER)`

make remote
    This command runs a WorkQueue-enabled job. You **must** change the the following command line arguments to run X # of workers
    - ```-w``` sets minimum workers in ```work_queue_factory```
    - ```-W``` sets maximum workers in ```work_queue_factory``` (we use the same to try and force equal workers throughout execution of a single run)
    - ```-worker-per-cycle``` sets maximum of new workers every 30s in ```work_queue_factory``` (should be same number as -w and -W)
    - `-J` sets maximum number of concurrent makeflow processes at a time
    - `-M` sets the name of the project. We suggest using a name to indicate the # of workers subscribed

    - Any time results and errors are redirected to ```output.txt``` in `$(OUTPUTFOLDER)`

make clean
    This command cleans up artifacts of data simulation in working directory and prep for next run.

SUGGESTIONS
- runs may have to be repeated for quality results sometimes due to intermittent errors or long running straggler.
- ```perl cleanup``` may have to be run to clean work queue tasks if workflow was interrupted. 
- use a ```>``` command to output terminal output to a designated file for long running jobs that may clear out your terminal if left unattended
- e.g. ```make remote > details.txt``` to output terminal commands to ```details.txt```


